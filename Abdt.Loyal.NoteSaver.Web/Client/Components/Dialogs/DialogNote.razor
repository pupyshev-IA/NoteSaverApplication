@using Abdt.Loyal.NoteSaver.Web.Shared

<MudDialog Class="rounded-tr-xl rounded-bl-xl" TitleClass="dialog-background-title">
    <TitleContent>
        <MudStack Row Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
            <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="Close" />
        </MudStack>
    </TitleContent>

    <DialogContent>
        <MudStack Row Justify="Justify.FlexEnd" Style="margin-bottom: 3ex">
            <MudChipSet T="string" @bind-SelectedValue="selectedStatus" CheckMark SelectionMode="SelectionMode.SingleSelection">
                @foreach (NoteStatus status in Enum.GetValues(typeof(NoteStatus)))
                {
                    <MudChip Variant="Variant.Text" Color="@GetStatusColor(status)" Value="@(status.ToString())">@(status.ToString())</MudChip>
                }
            </MudChipSet>
        </MudStack>

        <MudStack Row Justify="Justify.SpaceBetween">
            <MudStack Spacing="5" Style="width: 100%">
                <MudTextField T="string" Label="Title" @bind-Value="@title" ReadOnly="@(isEditing ? false : true)" Variant="Variant.Text" />
                <MudTextField T="string" Label="Content" @bind-Value="@content" ReadOnly="@(isEditing ? false : true)" AutoGrow Lines="7" MaxLines="15" Variant="Variant.Text" />
            </MudStack>

            <MudStack>
                <MudStack Spacing="0" Class="stack-adorner">
                    <MudButton Color="Color.Inherit" Class="pa-3 rounded-0" OnClick="() => isEditing = !isEditing">
                        <MudIcon Icon="@Icons.Material.Outlined.Edit" />
                    </MudButton>
                    <MudButton Color="Color.Inherit" Class="pa-3 rounded-0" OnClick="RefreshDialogProperties">
                        <MudIcon Icon="@Icons.Material.Outlined.Refresh" />
                    </MudButton>
                    <MudButton Color="Color.Inherit" Class="pa-3 rounded-0">
                        <MudIcon Icon="@Icons.Material.Outlined.Delete" />
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudStack>

        <MudStack Row Justify="Justify.FlexStart" Style="margin-top: 2ex">
            <MudChip T="string" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small">
                Created: @Note.CreatedAt.ToString("dd-MM-yyyy")
            </MudChip>
            <MudChip T="string" Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Small">
                Updated: @Note.UpdatedAt.ToString("dd-MM-yyyy")
            </MudChip>
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .dialog-background-title {
        padding: 0;
        height: auto;
        background: #1ec8a5;
    }

    .dialog-background-content {
    }

    .dialog-background-actions {
    }
</style>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter] public Note Note { get; set; }

    private bool isEditing = false;
    private string title = string.Empty;
    private string content = string.Empty;
    private string selectedStatus = string.Empty;

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));
    private void Close() => MudDialog.Close(DialogResult.Ok(true));
    private void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        RefreshDialogProperties();
    }

    private void RefreshDialogProperties()
    {
        title = Note.Title;
        content = Note.Content;
        selectedStatus = Note.Status.ToString();

        isEditing = false;
    }

    private Color GetStatusColor(NoteStatus status)
    {
        return status switch
        {
            NoteStatus.InProgress => Color.Info,
            NoteStatus.Done => Color.Success,
            NoteStatus.Pending => Color.Warning,
            NoteStatus.Cancelled => Color.Error
        };
    }
}

@page "/workspace/notes"

@using Abdt.Loyal.NoteSaver.Web.Client.Components.Dialogs
@using Abdt.Loyal.NoteSaver.Web.Client.Http
@using Abdt.Loyal.NoteSaver.Web.Shared

@inject ISnackbar _snackbar
@inject IDialogService _dialogService
@inject INoteClient<Note> _noteClient

<MudContainer Class="mt-6">
    <MudPaper Class="py-3" Elevation="0">
        <MudText Typo="Typo.h4" Class="px-4">My notes</MudText>
        <MudText Typo="Typo.body1" Class="px-4 mud-text-secondary">Easy note-taking</MudText>
        <MudFab Color="Color.Tertiary" Class="add-btn" OnClick="AddNote" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" Ripple="true" />
    </MudPaper>

    <MudGrid Class="mt-4 align-center" Justify="Justify.Center">
        @foreach (var note in notes)
        {
            <MudItem xs="12" sm="6">
                <MudCard Elevation="2" Class="card rounded-xl" Style="@(GetBackgroundColor(note.Status))" @onclick="() => OpenDialogNoteAsync(note)">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div style="display: flex; justify-content: space-between; align-items: center">
                                <MudText Typo="Typo.h6"><b>@note.Title</b></MudText>
                                <MudChip T="string" Color="@GetStatusColor(note.Status)" Size="Size.Medium">@note.Status.ToString()</MudChip>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body1" Class="content">@note.Content</MudText>
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">@note.CreatedAt.ToString("HH:mm")</MudText>
                            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">@note.CreatedAt.ToString("dd MMMM yyyy")</MudText>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        <MudFlexBreak />

        <MudItem Style="margin-bottom: 30px;">
            <MudPagination Count="@pageCount" Selected="currentPage" SelectedChanged="ToPage" ShowFirstButton="true" ShowLastButton="true" Color="Color.Tertiary" />
        </MudItem>
    </MudGrid>

    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.KeyboardArrowUp" />
    </MudScrollToTop>
</MudContainer>

<style>
    .card {
        transition: transform 0.3s, box-shadow 0.3s;
        cursor: pointer;
    }

        .card:hover {
            transform: scale(1.05);
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);
        }

    .content {
        min-height: 50px;
        max-height: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        word-wrap: break-word;
    }

    .add-btn {
        position: fixed;
        top: 10%;
        right: 5%
    }
</style>

@code {
    private const int ElementsPerPage = 10;
    private int currentPage = 1;
    private int pageCount;

    private List<Note> notes = new();
    //private List<Note> pagedNotes => notes.Skip((currentPage - 1) * ElementsPerPage).Take(ElementsPerPage).ToList();

    protected override async Task OnInitializedAsync() => await FetchPage();

    private async Task FetchPage()
    {
        var page = await _noteClient.GetPage((ushort)currentPage, ElementsPerPage);
        if (page is null)
            return;

        notes = page.Items.ToList();
        pageCount = (int)Math.Ceiling((double)(page.AllItemsCount / ElementsPerPage));
    }

    private async Task ToPage(int pageIndex)
    {
        currentPage = pageIndex;
        await FetchPage();
    }

    private void AddNote()
    {

    }

    private async Task OpenDialogNoteAsync(Note note)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<DialogNote> { { x => x.Note, note } };

        await _dialogService.ShowAsync<DialogNote>("", parameters, options);
    }

    private Color GetStatusColor(NoteStatus status)
    {
        return status switch
        {
            NoteStatus.InProgress => Color.Info,
            NoteStatus.Done => Color.Success,
            NoteStatus.Pending => Color.Warning,
            NoteStatus.Cancelled => Color.Error
        };
    }

    private string GetBackgroundColor(NoteStatus status)
    {
        string color = status switch
        {
            NoteStatus.InProgress => Colors.Blue.Lighten5,
            NoteStatus.Done => Colors.Green.Lighten5,
            NoteStatus.Pending => Colors.Orange.Lighten5,
            NoteStatus.Cancelled => Colors.Red.Lighten5
        };

        return "background: " + color;
    }
}
